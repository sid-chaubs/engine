{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DemaTrading.ai backtesting engine Star Fork Download Follow @dema-trading-ai Please join our Discord for updates, support, our community & more: https://discord.gg/WXxjtNzjEx Introduction The DemaTrading.ai Engine is an open source backtesting Engine for trading as a part of DemaTrading . The Engine is completely made in the programming language Python ( click here to download Python ). Some Python experience makes this process easier, however with some extra effort this project should be runnable for anyone without any coding experience.","title":"Home"},{"location":"#dematradingai-backtesting-engine","text":"Star Fork Download Follow @dema-trading-ai Please join our Discord for updates, support, our community & more: https://discord.gg/WXxjtNzjEx","title":"DemaTrading.ai backtesting engine"},{"location":"#introduction","text":"The DemaTrading.ai Engine is an open source backtesting Engine for trading as a part of DemaTrading . The Engine is completely made in the programming language Python ( click here to download Python ). Some Python experience makes this process easier, however with some extra effort this project should be runnable for anyone without any coding experience.","title":"Introduction"},{"location":"changelog/","text":"Changelog Version 0.x TBA Version 0.x.x TBA","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-0x","text":"TBA","title":"Version 0.x"},{"location":"changelog/#version-0xx","text":"TBA","title":"Version 0.x.x"},{"location":"definitionsfaq/","text":"Coming Soon","title":"Definitions/FAQ"},{"location":"definitionsfaq/#coming-soon","text":"","title":"Coming Soon"},{"location":"hitw/","text":"What we can do for you - as an algorithm creator! DemaTrading is able to facilitate you with a platform for your algorithms, strategies, and bots to flourish! For you - as an algorithm creator - this means that our platform is able to host your strategies to investors and to assist you in getting more out of your algorithms! How does it work? Well, very simple! Let's show you via the hands of a simple calculation example! An investor has noticed your bot and is very interested in using it and they're using their own funds along with your bots: Investor X is willing to invest 1.000.000 in total funds (can be multiple bots) with a fee of 0,01% per trade You - as the algorithm supplier will receive 60% of that 0,01% fee! Now you might think that that's not much due to it being 0,01%. However, this amount will be multiplied the second a buy and a sell happens as both the buy and the sell will have this 0,01% fee. Now, you might think it's just one trade and that it's not a significant amount, but don't fret, this amount can be multiplied up to 30 times with every single day having a buy and a sell. This would equal the following: 1000000 x 0,0001 x 0,6 x 2 x 30 = 3600 per month (this is the full amount the algorithm supplier makes per month) That's 3600 that you can earn with your algorithm! If your bot trades twice a day, it can go up to 7200 a month that you can earn with your algorithm by using our platform!","title":"What we can do for you - as an algorithm creator!"},{"location":"hitw/#what-we-can-do-for-you-as-an-algorithm-creator","text":"DemaTrading is able to facilitate you with a platform for your algorithms, strategies, and bots to flourish! For you - as an algorithm creator - this means that our platform is able to host your strategies to investors and to assist you in getting more out of your algorithms!","title":"What we can do for you - as an algorithm creator!"},{"location":"hitw/#how-does-it-work","text":"Well, very simple! Let's show you via the hands of a simple calculation example! An investor has noticed your bot and is very interested in using it and they're using their own funds along with your bots: Investor X is willing to invest 1.000.000 in total funds (can be multiple bots) with a fee of 0,01% per trade You - as the algorithm supplier will receive 60% of that 0,01% fee! Now you might think that that's not much due to it being 0,01%. However, this amount will be multiplied the second a buy and a sell happens as both the buy and the sell will have this 0,01% fee. Now, you might think it's just one trade and that it's not a significant amount, but don't fret, this amount can be multiplied up to 30 times with every single day having a buy and a sell. This would equal the following: 1000000 x 0,0001 x 0,6 x 2 x 30 = 3600 per month (this is the full amount the algorithm supplier makes per month) That's 3600 that you can earn with your algorithm! If your bot trades twice a day, it can go up to 7200 a month that you can earn with your algorithm by using our platform!","title":"How does it work?"},{"location":"makingmoney/","text":"How we can help you with monetisation DemaTrading.ai was founded with the idea to be the perfect partner for anyone in, or interesting getting in, the beautiful world of algorithmic trading. We help traders to automate, optimise and monetise their trading strategies. No experience in trading? We can help you with your learning journey. Calculation example For beginners For manual traders For algo traders","title":"Making Money"},{"location":"makingmoney/#how-we-can-help-you-with-monetisation","text":"DemaTrading.ai was founded with the idea to be the perfect partner for anyone in, or interesting getting in, the beautiful world of algorithmic trading. We help traders to automate, optimise and monetise their trading strategies. No experience in trading? We can help you with your learning journey.","title":"How we can help you with monetisation"},{"location":"makingmoney/#calculation-example","text":"","title":"Calculation example"},{"location":"makingmoney/#for-beginners","text":"","title":"For beginners"},{"location":"makingmoney/#for-manual-traders","text":"","title":"For manual traders"},{"location":"makingmoney/#for-algo-traders","text":"","title":"For algo traders"},{"location":"quickstart/","text":"Running Requirements for running with Docker (recommended) Running the Engine just takes a few simple things: 1. Docker installed on your system (https://docs.docker.com/get-docker/) 2. Some code editor (https://www.jetbrains.com/pycharm/) 3. Abillity to copy + paste and some motivation to figure things out. Requirements for running without Docker (alternative) Running the Engine just takes a few simple things: 1. Have Python 3 installed on your system (https://www.python.org/downloads/) 2. Pip Running on your system (https://pip.pypa.io/en/stable/installing/) 3. Some code editor (https://www.jetbrains.com/pycharm/) 4. Install TA-Lib dependencies (see: https://github.com/mrjbq7/ta-lib Installation -> Dependencies) Running the Engine. Running without Docker First run: pip install -r requirements.txt After installing, you can run the backtesting module: python3 main.py Running with Docker (Docker is a must if using an Apple system with the Apple Silicon M1 chip or else it does not work). First run: docker build . -t dema-engine:alpha To run the container: docker run --rm dema-engine:alpha Note: do not forget '--rm' as your Docker will keep the container if you do, which is not necessary and will cause extreme increase in memory usage. Apple Silicon M1 Chip With the new M1 Chip by Apple Silicon, there are several compatibility issues with the packages required. While Docker works; TA-Lib, Pandas, and even Numpy are not compatible with the chip as of yet. The M1 Chip operates with ARM rather than x86, causing issues with regards to these Python packages. This is not something we are able to fix as it's on the behalf of the creators behind these packages and Apple itself, however, there are a few solutions that might help you or make it work on your Apple M1 machine. Open your Terminal application with Rosetta 2 and then run the script. You're ready to go! If it doesn't work with Rosetta, don't worry! There's another solution that can be offered. Just follow the following steps: Download Xcode12 Install Miniforge Create a Condo environment (don't forget to start up a new .zsh session after having installed Miniforge.) Use the following lines of code: conda create --name mytf conda activate mytf conda install -y python==3.8.6 conda install -y pandas TA-Lib You should be ready to go!","title":"Quickstart"},{"location":"quickstart/#running","text":"","title":"Running"},{"location":"quickstart/#requirements-for-running-with-docker-recommended","text":"Running the Engine just takes a few simple things: 1. Docker installed on your system (https://docs.docker.com/get-docker/) 2. Some code editor (https://www.jetbrains.com/pycharm/) 3. Abillity to copy + paste and some motivation to figure things out.","title":"Requirements for running with Docker (recommended)"},{"location":"quickstart/#requirements-for-running-without-docker-alternative","text":"Running the Engine just takes a few simple things: 1. Have Python 3 installed on your system (https://www.python.org/downloads/) 2. Pip Running on your system (https://pip.pypa.io/en/stable/installing/) 3. Some code editor (https://www.jetbrains.com/pycharm/) 4. Install TA-Lib dependencies (see: https://github.com/mrjbq7/ta-lib Installation -> Dependencies)","title":"Requirements for running without Docker (alternative)"},{"location":"quickstart/#running-the-engine","text":"","title":"Running the Engine."},{"location":"quickstart/#running-without-docker","text":"First run: pip install -r requirements.txt After installing, you can run the backtesting module: python3 main.py","title":"Running without Docker"},{"location":"quickstart/#running-with-docker-docker-is-a-must-if-using-an-apple-system-with-the-apple-silicon-m1-chip-or-else-it-does-not-work","text":"First run: docker build . -t dema-engine:alpha To run the container: docker run --rm dema-engine:alpha Note: do not forget '--rm' as your Docker will keep the container if you do, which is not necessary and will cause extreme increase in memory usage.","title":"Running with Docker (Docker is a must if using an Apple system with the Apple Silicon M1 chip or else it does not work)."},{"location":"quickstart/#apple-silicon-m1-chip","text":"With the new M1 Chip by Apple Silicon, there are several compatibility issues with the packages required. While Docker works; TA-Lib, Pandas, and even Numpy are not compatible with the chip as of yet. The M1 Chip operates with ARM rather than x86, causing issues with regards to these Python packages. This is not something we are able to fix as it's on the behalf of the creators behind these packages and Apple itself, however, there are a few solutions that might help you or make it work on your Apple M1 machine. Open your Terminal application with Rosetta 2 and then run the script. You're ready to go! If it doesn't work with Rosetta, don't worry! There's another solution that can be offered. Just follow the following steps: Download Xcode12 Install Miniforge Create a Condo environment (don't forget to start up a new .zsh session after having installed Miniforge.) Use the following lines of code: conda create --name mytf conda activate mytf conda install -y python==3.8.6 conda install -y pandas TA-Lib You should be ready to go!","title":"Apple Silicon M1 Chip"},{"location":"strategyexamples/","text":"Coming Soon","title":"Strategy Examples"},{"location":"strategyexamples/#coming-soon","text":"","title":"Coming Soon"}]}